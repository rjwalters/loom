name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA_ENABLED: "true"

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      rust: ${{ steps.filter.outputs.rust }}
      ci: ${{ steps.filter.outputs.ci }}
    steps:
      - uses: actions/checkout@v4

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'src/**/*.{ts,tsx,js,jsx,json,css,html}'
              - 'package*.json'
              - 'tsconfig.json'
              - 'biome.json'
            rust:
              - 'src-tauri/**/*.rs'
              - 'Cargo.{toml,lock}'
            ci:
              - '.github/workflows/**'

  frontend:
    name: Frontend (Lint, Format, TypeScript, Build)
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.ci == 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run parallel checks
        run: |
          set -e
          pnpm run lint &
          pnpm run format &
          pnpm exec tsc --noEmit &
          wait

      - name: Build frontend
        run: pnpm run build

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/
          retention-days: 7

  rust-format:
    name: Rust Format
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs: changes
    if: needs.changes.outputs.rust == 'true' || needs.changes.outputs.ci == 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - run: cargo fmt --all -- --check

  rust-build:
    name: Rust (Clippy + Test)
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: [changes, frontend]
    if: needs.changes.outputs.rust == 'true' || needs.changes.outputs.ci == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist/

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libjavascriptcoregtk-4.0-dev \
            libsoup2.4-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: mozilla-actions/sccache-action@v0.0.9

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-build
          cache-on-failure: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Run Clippy
        run: cargo clippy --workspace --all-targets --all-features --locked -- -D warnings

      - name: Run Tests
        run: cargo test --workspace --locked --all-features --no-fail-fast -- --nocapture

      - name: Show sccache stats
        if: always()
        run: sccache --show-stats

  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs:
      - frontend
      - rust-format
      - rust-build
    if: always()
    steps:
      - id: check-results
        run: |
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Rust Format: ${{ needs.rust-format.result }}"
          echo "Rust Build: ${{ needs.rust-build.result }}"

          FAILED=0
          [[ "${{ needs.frontend.result }}" == "failure" ]] && FAILED=$((FAILED+1))
          [[ "${{ needs.rust-format.result }}" == "failure" ]] && FAILED=$((FAILED+1))
          [[ "${{ needs.rust-build.result }}" == "failure" ]] && FAILED=$((FAILED+1))

          echo "failed_count=$FAILED" >> $GITHUB_OUTPUT

          if [[ $FAILED -gt 0 ]]; then
            echo "❌ $FAILED check(s) failed."
            exit 1
          fi

      - if: steps.check-results.outputs.failed_count == '0'
        run: echo "✅ All checks passed successfully!"

      - uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const jobs = {
              'Frontend': '${{ needs.frontend.result }}',
              'Rust Format': '${{ needs.rust-format.result }}',
              'Rust Build': '${{ needs.rust-build.result }}'
            };

            const statusIcon = (status) => {
              if (status === 'success') return '✅ Pass';
              if (status === 'skipped') return '⏭️ Skipped';
              if (status === 'cancelled') return '🚫 Cancelled';
              return '❌ Fail';
            };

            const allPassed = Object.values(jobs).every(
              status => status === 'success' || status === 'skipped'
            );

            let summary = core.summary
              .addHeading(allPassed ? '✅ CI Summary - All Passed' : '❌ CI Summary - Some Failed')
              .addHeading('Job Results', 3)
              .addTable([
                [{ data: 'Job', header: true }, { data: 'Status', header: true }],
                ...Object.entries(jobs).map(([name, status]) => [name, statusIcon(status)])
              ]);

            if (context.eventName === 'pull_request') {
              summary.addRaw(`\n\n🔀 Triggered by: PR #${context.payload.pull_request.number}`);
            }

            await summary.write();
