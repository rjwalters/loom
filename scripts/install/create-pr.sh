#!/usr/bin/env bash
# Create pull request for Loom installation

set -euo pipefail

WORKTREE_PATH="${1:-.}"
ISSUE_NUMBER="${2:-}"
BASE_BRANCH="${3:-}"
LOOM_VERSION="${LOOM_VERSION:-unknown}"
LOOM_COMMIT="${LOOM_COMMIT:-unknown}"

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

error() {
  echo -e "${RED}âœ— Error: $*${NC}" >&2
  exit 1
}

info() {
  echo -e "${BLUE}â„¹ $*${NC}" >&2
}

success() {
  echo -e "${GREEN}âœ“ $*${NC}" >&2
}

if [[ -z "$ISSUE_NUMBER" ]]; then
  error "Issue number required as second argument"
fi

if [[ -z "$BASE_BRANCH" ]]; then
  error "Base branch required as third argument"
fi

cd "$WORKTREE_PATH"

# Get current branch
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

info "Committing Loom installation..."

# Stage all changes
git add -A

# Check if there are changes to commit
if git diff --staged --quiet; then
  info "No changes to commit - Loom is already installed"
  info "Skipping commit and PR creation"
  # Exit successfully with a special marker that the caller can detect
  echo "NO_CHANGES_NEEDED"
  exit 0
fi

# Create commit message
COMMIT_MSG=$(cat <<EOF
Install Loom ${LOOM_VERSION} orchestration framework

Adds Loom configuration and GitHub workflow integration:
- .loom/ directory with configuration and scripts
- .claude/ MCP servers and prompts
- .github/ labels and workflows
- Documentation (CLAUDE.md, AGENTS.md)

Loom Version: ${LOOM_VERSION}
Loom Commit: ${LOOM_COMMIT}

Closes #${ISSUE_NUMBER}
EOF
)

# Commit changes (redirect output to stderr so it doesn't interfere with PR URL capture)
git commit -m "$COMMIT_MSG" >&2
success "Changes committed"

info "Pushing branch: $BRANCH_NAME"

# Push branch (use --force in case branch exists remotely from previous failed installation)
# Redirect output to stderr so it doesn't interfere with PR URL capture
git push -u origin "$BRANCH_NAME" --force >&2
success "Branch pushed"

info "Creating pull request..."

# Create PR body
PR_BODY=$(cat <<EOF
Closes #${ISSUE_NUMBER}

## Loom Installation

**Loom Version**: ${LOOM_VERSION}
**Loom Commit**: ${LOOM_COMMIT}

## What's included:

- âœ… \`.loom/\` - Configuration, roles, and scripts
- âœ… \`.claude/\` - MCP servers and prompts (target-specific only)
- âœ… \`.github/\` - Labels and workflows
- âœ… \`CLAUDE.md\`/\`AGENTS.md\` - Documentation with Loom reference

## GitHub Labels

Synced Loom workflow labels via \`.github/labels.yml\`

## Next Steps

1. **Tauri App Mode**: Open repository in Loom app for automated orchestration
2. **MOM Mode**: Open Claude Code terminals, use MCP commands and role-based workflows

See \`.loom/CLAUDE.md\` for complete usage details.

---
ðŸ¤– Generated by Loom installation process
EOF
)

# Create pull request
# Output goes to stderr so it doesn't interfere with URL capture
PR_OUTPUT=$(gh pr create \
  --base "$BASE_BRANCH" \
  --title "Install Loom ${LOOM_VERSION} (${LOOM_COMMIT})" \
  --body "$PR_BODY" \
  --label "loom:review-requested" 2>&1)

# Extract URL from output (last line that contains https://)
PR_URL=$(echo "$PR_OUTPUT" | grep -o 'https://[^ ]*' | tail -1)

if [[ -z "$PR_URL" ]]; then
  error "Failed to extract PR URL from gh output"
fi

success "Pull request created: $PR_URL"

# Output the PR URL (stdout, so it can be captured by caller)
echo "$PR_URL"
